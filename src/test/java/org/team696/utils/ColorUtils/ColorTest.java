/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.team696.utils.ColorUtils;

import org.junit.Test;
import static org.junit.Assert.*;

public class ColorTest {
  @Test
  public void testIntConstructor0() {
    Color color = new Color((int)0, (int)0, (int)0);
    double[] expecteds = { (double)0, (double)0, (double)0};
    assertArrayEquals("(0,0,0) should translate to (0,0,0)", expecteds, color.getAll(), 0.00001);
  }

  @Test
  public void testIntConstructor255() {
    Color color = new Color((int)255, (int)255, (int)255);
    double[] expecteds = { (double)1, (double)1, (double)1};
    assertArrayEquals("(255,255,255) should translate to (1,1,1)", expecteds, color.getAll(), 0.00001);
  }

  @Test
  public void testIntConstructor256() {
    Color color = new Color((int)256, (int)256, (int)256);
    double[] expecteds = { (double)1, (double)1, (double)1};
    assertArrayEquals("(256,256,256) should translate to (1,1,1)", expecteds, color.getAll(), 0.00001);
  }

  @Test
  public void testRGBtoHSVBlack() {
    Color color = new Color(0.0, 0.0, 0.0);
    double[] expecteds = { 0, 0, 0 };
    assertArrayEquals("rgb(0,0,0) should map to hsv(0,0,0)", expecteds, color.getHSV(), 0.00001);
  }

  @Test
  public void testRGBtoHSVWhite() {
    Color color = new Color(1.0, 1.0, 1.0);
    double[] expecteds = { 0, 0, 1 };
    assertArrayEquals("rgb(1,1,1) should map to hsv(0,0,1)", expecteds, color.getHSV(), 0.00001);
  }

  @Test
  public void testRGBtoHSVRed() {
    Color color = new Color(1.0, 0.0, 0.0);
    double[] expecteds = { 0, 1, 1};
    assertArrayEquals("rgb(1,0,0) should map to hsv(0,1,1)", expecteds, color.getHSV(), 0.00001);
  }

  @Test
  public void testRGBtoHSVGreen() {
    Color color = new Color(0.0, 1.0, 0.0);
    double[] expecteds = {(1.0/3.0), 1, 1};
    assertArrayEquals("rgb(0,1,0) should map to hsv(0.333...,1,1)", expecteds, color.getHSV(), 0.00001);
  }

  @Test
  public void testRGBtoHSVBlue() {
    Color color = new Color(0.0, 0.0, 1.0);
    double[] expecteds = {(2.0/3.0), 1, 1};
    assertArrayEquals("rgb(0,0,1) should map to hsv(0.666...,1,1)", expecteds, color.getHSV(), 0.00001);
  }
}
