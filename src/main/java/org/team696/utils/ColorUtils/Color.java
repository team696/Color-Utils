/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.team696.utils.ColorUtils;

public class Color {
  private double red;
  private double green;
  private double blue;

  public Color() {
    this.red = 0;
    this.green = 0;
    this.blue = 0;
  }

  public Color(double red, double green, double blue) {
    this.red = red;
    this.green = green;
    this.blue = blue;
  }

  public Color(int red, int green, int blue) {
    if(red > 254){
      this.red = 1.0;
    } else if(red < 0){
      this.red = 0.0;
    } else {
      this.red = (double) red / 255;
    }

    if(green > 254){
      this.green = 1.0;
    } else if(green < 0){
      this.green = 0.0;
    } else { 
      this.green = (double) green / 255;
    }

    if(blue > 254){
      this.blue = 1.0;
    } else if(blue < 0){
      this.blue = 0;
    } else{
      this.blue = (double) blue / 255;
    }
  }

  public double getRed() {
    return this.red;
  }

  public void setRed(double red) {
    this.red = red;
  }

  public double getGreen() {
    return this.green;
  }

  public void setGreen(double green) {
    this.green = green;
  }

  public double getBlue() {
    return this.blue;
  }

  public void setBlue(double blue) {
    this.blue = blue;
  }

  public double[] getAll(){
    double[] result = new double[3];
    result[0] = red;
    result[1] = green;
    result[2] = blue;
    return result;
  }

  public double[] getHSV() {
    double[] result = new double[3];
    double min;
    double max;

    // Value
    if (red < green) {
      min = red;
      max = green;
    } else {
      min = green;
      max = red;
    }
    if (blue > max) {
      max = blue;
    } else if (blue < min) {
      min = blue;
    }
    result[2] = max;

    // Saturation
    if (max == 0) {
      result[1] = 0;
    } 
    else {
      result[1] = (max - min) / max;
    }

    // Hue
    if (result[1] == 0) {
      result[0] = 0;
    } 
    else {
      double diff = max - min;
      if (max == red) {
        result[0] = (green - blue) / diff;
      } 
      else if (green == max) {
        result[0] = 2.0 + ((blue - red) / diff);
      } 
      else {
        result[0] = 4.0 + ((red - green) / diff);
      }

      result[0] *= (60.0 / 360.0);

      if (result[0] < 0) {
        result[0]++;
      }
    }

    return result;
  }

  public void fromHSV(double hue, double sat, double value){
    double C = value * sat;
    double Hprime = hue/(60./360.);
    double X = C*(1.0-Math.abs(Hprime % 2 - 1));
    double R1, G1, B1;
    if(0 <= Hprime && Hprime <= 1){
      R1 = C;
      G1 = X; 
      B1 = 0;
    } else if(1 < Hprime && Hprime <= 2){
      R1 = X;
      G1 = C; 
      B1 = 0;
    } else if(2 < Hprime && Hprime <= 3){
      R1 = 0;
      G1 = C; 
      B1 = X;
    } else if(3 < Hprime && Hprime <= 4){
      R1 = 0;
      G1 = X; 
      B1 = C;
    } else if(4 < Hprime && Hprime <= 5){
      R1 = X;
      G1 = 0; 
      B1 = C;
    } else if(5 < Hprime && Hprime <= 6){
      R1 = C;
      G1 = 0; 
      B1 = X;
    } else{
      //IDK
      R1 = 0;
      G1 = 0; 
      B1 = 0;
    }

    double m = value - C;
    this.red = R1 + m;
    this.green = G1 + m;
    this.blue = B1 + m;
  }

}
